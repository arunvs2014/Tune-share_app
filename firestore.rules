rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Allow read/write access for development purposes.
    // In production, you should restrict access to authenticated users
    // and implement more granular rules.
    match /{document=**} {
      allow read, write: if true;
    }

    // Users:
    // - Anyone can create a user (signup).
    // - Authenticated users can read any user's profile.
    // - Only the user themselves can update or delete their profile.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if true;
      allow update, delete: if request.auth.uid == userId;
    }

    // Posts:
    // - Authenticated users can create posts.
    // - Authenticated users can read all posts.
    // - Only the author of a post can update or delete it.
    // - Authenticated users can like/unlike posts (update the 'likes' array).
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (request.resource.data.uid == request.auth.uid || request.auth.uid in resource.data.likes != request.auth.uid in request.resource.data.likes);
      allow delete: if request.auth.uid == resource.data.uid;
    }

    // Comments:
    // - Authenticated users can create comments.
    // - Authenticated users can read all comments.
    // - Only the author of a comment can update or delete it.
    match /comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth.uid == resource.data.uid;
    }

    // Playlists:
    // - Authenticated users can create playlists.
    // - Authenticated users can read public playlists (add a 'public' field for this).
    // - For this template, only the owner can read, update, or delete their playlist.
    match /playlists/{playlistId} {
      allow read, create, update, delete: if request.auth.uid == resource.data.uid;
    }
  }
}
